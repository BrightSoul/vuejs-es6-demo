{
  "eslint.enable": true,
  "javascript.referencesCodeLens.showOnAllFunctions": true,
  "editor.tabSize": 2,
  "files.exclude": {
    "**/.git": true,
    "**/.DS_Store": true,
    "**/node_modules": true,
    "**/dist": true
  },
  // Enable the extension (it can be omitted)
  "htmlConfigurableAutocomplete.enable": true,
  // Enable verbose logging
  "htmlConfigurableAutocomplete.debug": true,
  // Tell it how to autocomplete HTML content
  "htmlConfigurableAutocomplete.completionItemProviders": [
    {
      // Can be omitted
      "enable": true,
      // It should be activated when < is pressed (for tag names)
      "triggerCharacters": [
        "<"
      ],
      // Then look into js files in the components directory
      "includeGlobPattern": "src/components/**/*.js",
      // Find the component name in there and show it as a completion item
      "contentRegexp": "@Component\\(\\s*['\"]([a-z-]+)",
      // It should have this icon
      "itemKind": "Constant"
    },
    {
      // Can be omitted
      "enable": true,
      // It should also be activated when space is pressed (for attributes)
      "triggerCharacters": [
        " "
      ],
      // But just when the cursor is in an element tag, at a position where an attribute name can be inserted
      "triggerRegexp": "<[a-z-]+(\\s+[a-z-]+(=\".*?\")?)*[^\"<>]*",
      // Show a couple statically-defined completion items
      "staticItems": [
        "data-for",
        "data-if"
      ],
      // We're typing an attribute name here, so let's help the user by adding ="" right after. The cursor will stop in between double quotes
      "completionItemSuffix": "=\"\t\"",
      // They should have this icon
      "itemKind": "Enum"
    },
    {
      // Can be omitted
      "enable": true,
      // It should also be activated when space is pressed (for attributes)
      "triggerCharacters": [
        "{"
      ],
      // But just when the cursor is inside an element with the data-for attribute
      "triggerRegexp": "data-for=.*?>.*{{",
      // Before executing triggerRexep though, flatten the HTML of the current document
      "triggerTransformer": "flatten-html",
      // Show a couple statically-defined completion items
      "staticItems": [
        "$item",
        "$index"
      ],
      // They should have this icon
      "itemKind": "Enum"
    },
    {
      // Can be omitted
      "enable": true,
      // It should also be activated when space is pressed (for attributes)
      "triggerCharacters": [
        " "
      ],
      // But just when the cursor is in an element tag, at a position where an attribute name can be inserted
      "triggerRegexp": "<[a-z-]+(\\s+[a-z-]+(=\".*?\")?)*[^\"<>]*",
      // Let's go look for this component definition and get its public fields (the definition is found thanks to the definition provider configured below)
      "includeGlobPattern": "${definitionFilePath}",
      // Transform original JavaScript content into a list of class and member definitions
      "contentTransformer": "es6-module-nodes",
      // And inside of it, look for setter methods
      "contentRegexp": "instance public set ([a-z0-9_]+)",
      // JavaScript properties are in camel case, so we transform them in kebab case since they will be used as element attributes
      "completionItemTransformer": "camelcase-to-kebabcase",
      // We're typing an attribute name here, so let's help the user by adding ="" right after. The cursor will stop in between double quotes
      "completionItemSuffix": "=\"\t\"",
      // They should have this icon
      "itemKind": "Field"
    },
    {
      // Fixed config
      "enable": true,
      // It should also be activated when { is pressed (for moustached syntax)
      "triggerCharacters": [
        "{", " "
      ],
      // But just when two { have been typed already
      "triggerRegexp": "{{\\s*",
      "staticItems": [
        "localization"
      ],
      "completionItemSuffix": ".",
      // It should have this icon
      "itemKind": "Constant"
    },
    {
      // Can be omitted
      "enable": true,
      // It should also be activated when { or . is pressed
      "triggerCharacters": [
        "{", "."
      ],
      // But just when two { have been typed already and also when 'localization' has been typed
      "triggerRegexp": "{{\\s*localization\\.([^} ]*)",
      // Go look inside the localization JSON file
      "includeGlobPattern": "src/localization[.]json",
      // Transform JSON content to a flattened hierarchy
      "contentTransformer": "flatten-json",
      // And inside of it, look for properties. The $1 placeholder will be substituted by the capture in triggerRegexp (i.e. what the user typed)
      "contentRegexp": " $1([a-z0-9_]+)",
      // It should have this icon
      "itemKind": "Field"
    },
    {
      // Can be omitted
      "enable": true,
      // It should also be activated when { is pressed (for moustached syntax)
      "triggerCharacters": [
        "{"
      ],
      // But just when two { have been typed already
      "triggerRegexp": "{{",
      // Go look inside a js file that has the same name and lives in the same directory
      "includeGlobPattern": "${dirPath}${fileNameWithoutExtension}[.]js",
      // Transform JS content as a list of class and members definitions
      "contentTransformer": "es6-module-nodes",
      // And inside of it, look for properties
      "contentRegexp": "instance public property ([a-z0-9_]+)",
      // It should have this icon
      "itemKind": "Field"
    }
  ],
  // Now tell it how to navigate to definitions
  "htmlConfigurableAutocomplete.definitionProviders": [
    {
      // Can be omitted
      "enable": true,
      // Definitions are provided when the cursor is on tag names having a - in them
      "definitionRegexp": "</?([a-z]+-[a-z]+)[^>]*",
      // Then go look inside js files that live in the components directory
      "includeGlobPattern": "src/components/**/*.js",
      // And find that very same tag name in them; if one is found, VSCode navigates to definition!
      "contentRegexp": "@Component\\(\\s*['\"]([a-z-]+)"
    },
    {
      // Can be omitted
      "enable": true,
      // Definitions are provided when the cursor is inside moustaches
      "definitionRegexp": "{{\\s*(.+?)\\s*}}",
      // Then go look inside js file that lives in the same directory and has the same name with the js extension
      "includeGlobPattern": "${dirPath}${fileNameWithoutExtension}[.]js",
      // Then find the field it's referring to
      "contentRegexp": "^\\s*([a-z0-9_]+)\\s*;?\\s*$"
    }
  ],
  // Tell it how to find references (i.e. usages) in the project
  "htmlConfigurableAutocomplete.referenceProviders": [
    {
      // Can be omitted
      "enable": true,
      // Get the name of the component so we can find references in the project
      "referenceRegexp": "@Component\\(\\s*['\"]([a-z-]+)",
      // Look for references inside HTML files
      "includeGlobPattern": "src/components/**/*.html",
      // References look like tag elements with a - in their name
      "contentRegexp": "<([a-z]+-[a-z]+)"
    }
  ]
}