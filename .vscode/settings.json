{
  "eslint.enable": true,
  "javascript.referencesCodeLens.showOnAllFunctions": true,
  "files.exclude": {
    "**/.git": true,
    "**/.DS_Store": true,
    "**/node_modules": true,
    "**/dist": true
  },
  //Enable the extension (it can be omitted)
  "htmlConfigurableAutocomplete.enable": true,
  //Tell it how to autocomplete HTML content
  "htmlConfigurableAutocomplete.completionItemProviders": [
    {
      //Can be omitted
      "enable": true,
      //It should be activated when < is pressed (for tag names)
      "triggerCharacters": [
        "<"
      ],
      //Then look into js files in the components directory
      "includeGlobPattern": "src/components/**/*.js",
      //Find the component name in there and show it as a completion item
      "contentRegexp": "@Component\\(\\s*['\"]([a-z-]+)",
      //It should have this icon
      "itemKind": "Constant"
    },
    {
      //Can be omitted
      "enable": true,
      //It should also be activated when space is pressed (for attributes)
      "triggerCharacters": [
        " "
      ],
      //But just when the cursor is in an element tag, at a position where an attribute name can be inserted
      "triggerRegexp": "<[a-z-]+(\\s+[a-z-]+(=\".*?\")?)*[^\"<>]*",
      //Show a couple statically-defined completion items
      "staticItems": [
        "data-for",
        "data-if"
      ],
      //They should have this icon
      "itemKind": "Enum"
    },
    {
      //Can be omitted
      "enable": true,
      //It should also be activated when space is pressed (for attributes)
      "triggerCharacters": [
        " "
      ],
      //But just when the cursor is in an element tag, at a position where an attribute name can be inserted
      "triggerRegexp": "<[a-z-]+(\\s+[a-z-]+(=\".*?\")?)*[^\"<>]*",
      //Let's go look for this component definition and get its public fields (the definition is found thanks to the definition provider configured below)
      "includeGlobPattern": "${definitionFilePath}",
      //And inside of it, look for fields (I know, I know, this should be less naive and maybe use a proper js parser, which maybe I'll implement soon)
      "contentRegexp": "^\\s*([a-z0-9_]+)\\s*;?\\s*$",
      //They should have this icon
      "itemKind": "Field"
    },
    {
      //Can be omitted
      "enable": true,
      //It should also be activated when { is pressed (for moustached syntax)
      "triggerCharacters": [
        "{"
      ],
      //But just when two { have been typed already
      "triggerRegexp": "{{",
      //Go look inside a js file that has the same name and lives in the same directory
      "includeGlobPattern": "${dirPath}${fileNameWithoutExtension}[.]js",
      //And inside of it, look for fields (again, it should use a less naive approach)
      "contentRegexp": "^\\s*([a-z0-9_]+)\\s*;?\\s*$",
      //It should have this icon
      "itemKind": "Field"
    }
  ],
  //Now tell it how to navigate to definitions
  "htmlConfigurableAutocomplete.definitionProviders": [
    {
      //Can be omitted
      "enable": true,
      //Definitions are provided when the cursor is on tag names having a - in them
      "definitionRegexp": "</?([a-z]+-[a-z]+)[^>]*",
      //Then go look inside js files that live in the components directory
      "includeGlobPattern": "src/components/**/*.js",
      //And find that very same tag name in them; if one is found, VSCode navigates to definition!
      "contentRegexp": "@Component\\(\\s*['\"]([a-z-]+)"
    },
    {
      //Can be omitted
      "enable": true,
      //Definitions are provided when the cursor is inside moustaches
      "definitionRegexp": "{{\\s*(.+?)\\s*}}",
      //Then go look inside js file that lives in the same directory and has the same name with the js extension
      "includeGlobPattern": "${dirPath}${fileNameWithoutExtension}[.]js",
      //Then find the field it's referring to
      "contentRegexp": "^\\s*([a-z0-9_]+)\\s*;?\\s*$"
    }
  ],
  //Tell it how to find references (i.e. usages) in the project
  "htmlConfigurableAutocomplete.referenceProviders": [
    {
      //Can be omitted
      "enable": true,
      //Get the name of the component so we can find references in the project
      "referenceRegexp": "@Component\\(\\s*['\"]([a-z-]+)",
      //Look for references inside HTML files
      "includeGlobPattern": "src/components/**/*.html",
      //References look like tag elements with a - in their name
      "contentRegexp": "<([a-z]+-[a-z]+)"
    }
  ]
}